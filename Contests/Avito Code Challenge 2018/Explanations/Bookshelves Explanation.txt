Blog Link - http://qr.ae/TUTmQ6

Let us answer, a related question. 

If given a number x, how do we determine if it is possible to divide the numbers into K segments such that the bitwise AND of the sum of the K segments = x ? 

Each segment[L, R] has to obey the following property - 

(Sum[R] - Sum[L - 1])&x = x, 

i.e. all the bits that are set in x, must be set in the sum from [L, ... , R] for each of the K segments !

We can check this with dynamic programming. 

Let f(n, k) = true, if it is possible for the bitwise-AND of the sums of the first K segments = x, with the last segment ending on n.
And f(n, k) = false, otherwise. 

f(R, K) = true, if there exists some L < R, such that 

Sum[L ... R]&x = x and f(L - 1, K - 1) = true.

It takes us O(N^2 K) time to answer one such question. 

Now, let us be greedy and start from i = 60, and check if answer + 2^i is possible, if it is then the answer = answer + 2^i.

This is always optimal.

Overall Complexity = O(log(S) N^2 K)

-----------------------------------------------

int is_possible(LL goal)
{
    memset(possible, false, sizeof(possible));

    possible[0][0] = true;

    for(int part = 1; part <= no_of_parts; part++)
    {
        for(int right = 1; right <= no_of_elements; right++)
        {
            for(int left = 0; left < right; left++)
            {
                if( possible[left][part - 1] && ( ( (sum[right] - sum[left])&goal ) == goal ) )
                {
                    possible[right][part] = true;
                    break;
                }
            }
        }
    }

    return possible[no_of_elements][no_of_parts];
}

int main()
{
    scanf("%d %d", &no_of_elements, &no_of_parts);

    for(int i = 1; i <= no_of_elements; i++)
        scanf("%I64d", &A[i]);

    sum[0] = 0;
    for(int i = 1; i <= no_of_elements; i++)
        sum[i] = sum[i - 1] + A[i];

    LL answer = 0;

    for(int bit = MAX_BIT; bit >= 0; bit--)
    {
        if(is_possible(answer|(1LL << bit)))
        {
            answer |= (1LL << bit);
        }
    }

    printf("%I64d\n", answer);
    return 0;
}
