Let us call a substring of same characters a 'block'.

Let us call a substring of same characters a 'chunk' if it is of size = k

If we have a block of size >= k, we will divide it into chunks of size k. 

The 'level' of a string is the number of chunks we can make with any one alphabet. 

So, we will calculate the number of 'chunks' we can make with each alphabet and then find which alphabet has the highest number of 'chunks'.

----

Let f(i) denote the length of the 'block' size ending at i.

If position i is the end of a 'block', Then we can have [f(i)/k] 'chunks' from this 'block'. 

We will keep track of the number of 'chunks' we can have of each alphabet and then find the maximum.

----

Suppose we have aaabaaaa

Then f(i) would be {1 2 3 1 1 2 3 4}

If k = 2, 

Then the first block aaa, can be divided into one substring of length 2. So, we get one chunk from the first block.

The second block aaaa, can be divided into two substrings of length 2. So, we get two chunks from the second block.

We get 3 chunks of a
We do not have any chunks of b as there is only one block of b, who's size is 1 so we cannot divide it into chunks of a.

----

We calculate f(i) with a simple DP. 

vector <int> longest_block_till(length, 0);
    longest_block_till[0] = 1;
    for(int i = 1; i < length; i++)
    {
        longest_block_till[i] = (S[i] == S[i - 1] ? longest_block_till[i - 1] + 1 : 1);
    }

---

And then we use f(i). We know a block ends if it is either the end of the string or a position such that S[i] != S[i + 1]. 

At this position we will find the number of new blocks of the letter S[i] that are possible

const int NO_OF_ALPHABETS = 26;
    vector <int> no_of_k_sequences(NO_OF_ALPHABETS, 0);
    for(int i = 0; i < length; i++)
    {
        if(i == length - 1 || S[i] != S[i + 1])//Reached the end of a block
        {
            no_of_k_sequences[S[i] - 'a'] += longest_block_till[i]/k;
        }
    }

---

After this, we will find out which alphabet has the highest number of blocks. 

int answer = 0;
    for(int i = 0; i < NO_OF_ALPHABETS; i++)
        answer = max(answer, no_of_k_sequences[i]);