Let us try to examine the properties of n, if it had a different remainder with every number from 1 to k.

n = 0 (mod 1)

This means 

n = 1 (mod 2) No other option.

Similarly, 

n = 2 (mod 3)

n = 3 (mod 4)

And so on. 

At every stage, n = -1 (mod i)

This means, (n + 1) = 0 (mod i)

This means that (n + 1) must be divisible by every number from 1 to i.

I made the mistake of thinking that it means (n + 1) should be i!, and then a multiple of i!, but that's incorrect. 

It's a common mistake. If you mark multiples of A and B, multiples of LCM(A, B) will be marked twice, not AB. LCM(A, B) = AB, when they are coprime. 

So, actually (n + 1) should be a multiple of all numbers from 1 to i, means it should be divisibly by LCM(1, ... , i)

I checked how fast the sequence grows and when i = 43, it is > 10^18. So in the contest, I precomputed all LCM's from 1 to 42, and then if k < 43 and (n + 1)%lcm(43) == 0,

Answer is yes

------------------------------------------------------------------------------

#include <cstdio>

int main()
{
    long long n, k;
    scanf("%I64d %I64d", &n, &k);

    long long lcm_1_till[45];
    lcm_1_till[1] = 1;

    for(int i = 2; i < 43; i++)
    {
        int ii = i;
        long long extra = 1, lcm_i_minus_1 = lcm_1_till[i - 1];

        for(int j = 2; j <= ii; j++)
        {
            while(ii%j == 0)
            {
                ii /= j;
                if(lcm_i_minus_1%j == 0)
                    lcm_i_minus_1 /= j;
                else
                    extra *= j;

            }
        }

        lcm_1_till[i] = lcm_1_till[i - 1]*extra;
    }

    printf( k < 43 && (n + 1)%lcm_1_till[k] == 0 ? "Yes\n" : "No\n");

    return 0;
}

-------------------------------------------------------------------------------

After the contest, and reading the editorial, I made it cleaner by realising that no need of precomputing, k < 43, so you can check every number from 1 to 42, provided

k < 43

int main()
{
    long long n, k;
    scanf("%I64d %I64d", &n, &k);

    const int LIMIT = 43;
    int divisible_by_lcm = true;

    if(k < LIMIT)
    {
        for(int i = 1; i <= k; i++)
        {
            if( (n + 1)%i != 0)
            {
                divisible_by_lcm = false;
                break;
            }
        }
    }

    printf(k < LIMIT && divisible_by_lcm ? "Yes\n" : "No\n");
    return 0;
}
