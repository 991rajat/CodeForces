Blog Link - http://qr.ae/TUGAjY

Suppose you have the numbers A(1), A(2), A(3), ..., A(n)

What is the length when you visit them in round 1 ?

A(1) — 0, A(2) — 1, A(3) — 2, A(4) - 3, ..., A(n) — (n - 1)

You visit queue i when it's size = A(i) — (i - 1) in round 1

After that notice if you visit a queue at size t, you also visit it at sizes t - n, t - 2n, t - 3n, ..., 0.

Now, how many visits do you make at a queue when it is 0 ?

The answer is t / n = (A(i) — (i - 1)) / n

So, for each queue calculate the time it will take to reach it and keep track of the minimum. 
Now, a small trick here is settign every A[i] to max{A[i] - (i - 1), 0}. It should not be negative. 
Made that mistake the first time. The program will then think it takes 1 round to reach when it actually hits it in the 
first round itself.

----------------------------------------------------------------------

vector <int> length(no_of_queues + 1);
    for(int i = 0; i < no_of_queues; i++)
        scanf("%d", &length[i]);

    for(int i = 0; i < no_of_queues; i++)
        length[i] = max(length[i] - i, 0);

    vector <int> rounds_to_arrive_at(no_of_queues);
    for(int i = 0; i < no_of_queues; i++)
        rounds_to_arrive_at[i] = ceil(length[i], no_of_queues);

    const int oo = 1e9;
    int best_queue, minimum_rounds = oo;
    for(int i = 0; i < no_of_queues; i++)
        if(rounds_to_arrive_at[i] < minimum_rounds)
            minimum_rounds = rounds_to_arrive_at[i], best_queue = i + 1;

    printf("%d\n", best_queue);
