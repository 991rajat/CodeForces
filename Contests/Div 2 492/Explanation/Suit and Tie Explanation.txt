We can be greedy. 

Go through the array. 

If A[i] =/= A[i + 1], 

Find the rightmost occurence of A[i] and keep swapping. 

Let us prove that this is optimal. 

now, if a and a are seperated

All other pairs, must be of the form

aa bb

abab
a bb a

Now in the first kind, our algorithm won't touch it. 

In the second kind, we need to atleast do one swap. The greedy algorithm does one swap. 

In the thrid, we need to do at least two, The greedy does two. 

We see the greedy algorithm does no more swaps than necessary.

-------------------------------------

int main()
{
    int no_of_couples;
    scanf("%d", &no_of_couples);

    vector <int> A(2*no_of_couples + 1);
    for(int i = 1; i <= 2*no_of_couples; i++)
        scanf("%d", &A[i]);

    int no_of_swaps = 0;
    for(int i = 1; i <= 2*no_of_couples; i += 2)
    {
        for(int j = 2*no_of_couples; j > i + 1; j--)
        {
            if(A[j] == A[i])
            {
                swap(A[j], A[j - 1]);
                no_of_swaps++;
            }
        }
    }

    printf("%d\n", no_of_swaps);
    return 0;
}



