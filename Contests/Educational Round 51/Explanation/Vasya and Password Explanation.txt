First, we'll check if S is valid.

int is_proper(string S)
{
    int upper_case = 0, lower_case = 0, digits = 0;
    for(int i = 0; i < S.size(); i++)
    {
        if('a' <= S[i] && S[i] <= 'z') lower_case++;
        if('A' <= S[i] && S[i] <= 'Z') upper_case++;
        if('0' <= S[i] && S[i] <= '9') digits++;
    }

    return (upper_case > 0 && lower_case > 0 && digits > 0);
}

-------------------------------

If S is already valid, don't do anything. 

if(upper_case > 0 && lower_case > 0 && digits > 0)
    {
        cout << S << "\n";
        return;
    }

----------------------------------

If S has only digits, but lacks upper case and lower case, then we can change the first two digits. 

    if(upper_case == 0 && lower_case == 0 && digits > 0)
    {
        S[0] = 'A'; S[1] = 'a';

        cout << S << "\n";
        return;
    }
    else if(upper_case == 0 && lower_case > 0 && digits == 0)
    {
        S[0] = 'A'; S[1] = '0';

        cout << S << "\n";
        return;
    }
    else if(upper_case > 0 && lower_case == 0 && digits == 0)
    {
        S[0] = 'a'; S[1] = '0';

        cout << S << "\n";
        return;
    }

---------------------------------------

If S has two properties but lacks the third, then keep changing one of the characters till you get a valid string. There will be atmost 2 checks like this.

for(int i = 0; i < S.size(); i++)//Runs at most 2 times.
    {
        char original = S[i];

        S[i] = '0'; if(is_proper(S)){cout << S << "\n"; return;}
        S[i] = 'a'; if(is_proper(S)){cout << S << "\n"; return;}
        S[i] = 'A'; if(is_proper(S)){cout << S << "\n"; return;}

        S[i] = original;
    }



