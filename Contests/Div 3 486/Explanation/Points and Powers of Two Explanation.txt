Fact - This is only possible for at most 3 points. 

Let P[1] < P[2] < P[3]. 

Let us suppose distance between P[1] and P[2] is x. 

And distance between P[2] and P[3] is x, then distance between P[1] and P[3] is 2x. 

If the distance between P[2] and P[3] is anything other than x, (say y). 

Then P[2] - P[1] = x, P[3] - P[2] = y

P[3] - P[1] = x + y,

x, y and x + y cannot all be powers of 2 unless x = y.

Now if we introduce a 4th point P[4]. P[4] - P[3] = x, But then P[4] - P[1] = 3x, which is not a power of 2. 

This completes our proof. 

------------------------

Now for each number and for each power of 2, we will do binary search to check if (A[i] + 2^p) is present in the array. 

We will first look for a triplet. 

If not there, we will look for a pair. 

If not there, we will print any one element of the array.

---------

int answer_i = -1, answer_j = -1;

    for(int i = 0; i < number_of_points; i++)
    {
        for(long long power = 1; power <= 1e12; power *= 2)
        {
            int j = upper_bound(all(P), P[i] + power - 1) - P.begin();

            if(P[j] - P[i] == power)
            {
                int k = upper_bound(all(P), P[j] + power - 1) - P.begin();

                if(P[k] - P[j] == power)//Answer can't be more than 3
                {
                    printf("3\n");
                    printf("%I64d %I64d %I64d\n", P[i], P[j], P[k]);
                    return 0;
                }
                else
                {
                    answer_i = i, answer_j = j;
                }
            }
        }
    }

    if(answer_i != -1 && answer_j != -1)
    {
        printf("2\n");
        printf("%I64d %I64d\n", P[answer_i], P[answer_j]);
    }
    else
    {
        printf("1\n");
        printf("%I64d\n", P[0]);
    }

