Xenia the beginner programmer has a sequence a, consisting of 2n non-negative integers: a1, a2, ..., a2n. Xenia is currently studying bit operations. 
To better understand how they work, Xenia decided to calculate some value v for a.

Namely, it takes several iterations to calculate value v. 
At the first iteration, Xenia writes a new sequence a1 or a2, a3 or a4, ..., a2n - 1 or a2n, consisting of 2n - 1 elements. 
In other words, she writes down the bit-wise OR of adjacent elements of sequence a. 
At the second iteration, Xenia writes the bitwise exclusive OR of adjacent elements of the sequence obtained after the first iteration. 
At the third iteration Xenia writes the bitwise OR of the adjacent elements of the sequence obtained after the second iteration. 
And so on; the operations of bitwise exclusive OR and bitwise OR alternate. In the end, she obtains a sequence consisting of one element, and that element is v.

Let's consider an example. Suppose that sequence a = (1, 2, 3, 4). Then let's write down all the transformations (1, 2, 3, 4)  →  (1 or 2 = 3, 3 or 4 = 7)  →  (3 xor 7 = 4). 
The result is v = 4.

You are given Xenia's initial sequence. But to calculate value v for a given sequence would be too easy, so you are given additional m queries. 
Each query is a pair of integers p, b. Query p, b means that you need to perform the assignment ap = b. 
After each query, you need to print the new value v for the new sequence a.

-----------------------------------------------

Build a segment trees. The leaves are the elements themselves. Each level we do either OR or XOR on the children nodes.

If there are an even number of levels, the first operation is XOR ... Else it is OR.

To do an update, we must trace a path from the root to the leaf. This is O(n), where n is the number of levels. 
Or O(log n), if n is the number of elements.

--------------------------------------------

int tree[3*MAX_SIZE];
int element[MAX_SIZE];

int perform(int a, int operation, int b)
{
    switch(operation)
    {
        case OR  :  return (a|b);
        case XOR :  return (a^b);
    }
}

int other(int operation)
{
    return (operation^1);
}

void build(int node, int start, int end, int operation)
{
    if(start == end)
    {
        tree[node] = element[start];
        return;
    }

    int mid = (start + end)/2;

    build(2*node, start, mid, other(operation));
    build(2*node + 1, mid + 1, end, other(operation));

    tree[node] = perform(tree[2*node], operation, tree[2*node + 1]);
}

void update(int node, int start, int end, int index, int value, int operation)
{
    if(start == end)
    {
        tree[node] = element[index] = value;
        return;
    }

    int mid = (start + end)/2;

    if(index >= start && index <= mid)
    {
        update(2*node, start, mid, index, value, other(operation));
    }
    else if(index > mid && index <= end)
    {
        update(2*node + 1, mid + 1, end, index, value, other(operation));
    }

    tree[node] = perform(tree[2*node], operation, tree[2*node + 1]);
}

int main()
{
    int n, no_of_queries;
    scanf("%d %d", &n, &no_of_queries);

    int no_of_elements = (1 << n);
    for(int i = 1; i <= no_of_elements; i++)
        scanf("%d", &element[i]);

    int first_operation = (n%2 == 0 ? XOR : OR);
    build(1, 1, no_of_elements, first_operation);

    while(no_of_queries--)
    {
        int index, value;
        scanf("%d %d", &index, &value);

        update(1, 1, no_of_elements, index, value, first_operation);
        printf("%d\n", tree[1]);
    }
    return 0;
}
