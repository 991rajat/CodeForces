A number is said to be T prime if it has three positive divisors... Given a number upto 10^12, say if it is a T prime...

-------------------------------------

The only numbers which have an odd number of divisors are perfect squares. If it has three divisors, then it means that T primes are squares of prime numbers ...

Here's what I did ... Did Sieve of Erathosthenes to find all primes up to 1e6 ... Maintained a set of all the square primes ...

Checking the count of a set is O(log N), where N is the size of a set ...

I looked at some other approaches ...

People used optimised IO ... putchar and such ... Precomputed primes up to 1e6 ...

Input N, M = int sqrt(M) ... If M*M = N & is_prime(M) ... YES

This seems to have less time complexity because the query is answered in O(1) time once we know the square root as opposed to log(N) time ... 

But, I didn't use this because I am uncomfortable with the behaviour of any floating point functions .. I don't know what exactly sqrt does ... Rounding off may cause errors.

Also, calculating the square of a number is much easier than calculating it's square root ...

So, that solution is O(N log log N + T), where T is the time taken to find the square root of a number.
Mine is O(N log log N + log N), because of the time taken to query the count of an element in a set ... (balanced tree).

------------------------------------------------------------

set <long long> prime_square;

void precompute_prime_squares()
{
    vector <int> is_prime(1000000 + 1, true);

    for(int i = 2; i <= 1e6; i++)
    {
        if(is_prime[i])
        {
            prime_square.insert(i*1LL*i);

            for(int multiple = 2*i; multiple <= 1e6; multiple += i)
                is_prime[multiple] = false;
        }
    }
}

int main()
{
    int no_of_queries;
    scanf("%d", &no_of_queries);

    precompute_prime_squares();

    for(int i = 1; i <= no_of_queries; i++)
    {
        long long number;
        scanf("%I64d", &number);

        printf(prime_square.count(number) == 1 ? "YES\n" : "NO\n");
    }
    return 0;
}