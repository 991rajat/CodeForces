Polycarp has a checkered sheet of paper of size n?×?m. Polycarp painted some of cells with black, the others remained white. Inspired by Malevich's "Black Square", 
Polycarp wants to paint minimum possible number of white cells with black so that all black cells form a square.

You are to determine the minimum possible number of cells needed to be painted black so that the black cells form a black square with sides parallel to the painting's sides. 
All the cells that do not belong to the square should be white. The square's side should have positive length.

Input
The first line contains two integers n and m (1?=?n,?m?=?100) — the sizes of the sheet.

The next n lines contain m letters 'B' or 'W' each — the description of initial cells' colors. If a letter is 'B', then the corresponding cell is painted black, 
otherwise it is painted white.

Output
Print the minimum number of cells needed to be painted black so that the black cells form a black square with sides parallel to the painting's sides. 
All the cells that do not belong to the square should be white. If it is impossible, print -1.

----------------------------------------------------------

Keep track of the rightmost, leftmost, topmost, downmost black square the number of black squares.

The square of all black squares must contain these extreme black squares. Also, all other black square must be inside this.

Subtract the number of blocks in this square with the number of black squares.

A square is only possible if the side of this side is smaller than the minimum of the rectangle side.int main()
{
    int no_of_rows, no_of_columns;
    scanf("%d %d", &no_of_rows, &no_of_columns);
    char rectangle[MAX_LENGTH][MAX_LENGTH];

    int no_of_black_squares = 0, left_most = no_of_columns + 1, right_most = -1, highest = -1, lowest = no_of_rows + 1;

    for(int i = 0; i < no_of_rows; i++)
    {
        scanf("%s", rectangle[i]);

        for(int j = 0; j < no_of_columns; j++)
        {
            if(rectangle[i][j] == 'B')
            {
                no_of_black_squares ++;

                left_most = min(left_most, j);
                right_most = max(right_most, j);

                highest = max(highest, i);
                lowest = min(lowest, i);
            }
        }
    }

    int square_rows = highest - lowest + 1, square_columns = right_most - left_most + 1;
    int square_side = max(square_columns, square_rows);
    int repainted = -1;

    if(no_of_black_squares == 0)
    {
        repainted = 1;
    }
    else if(square_side <= min(no_of_rows, no_of_columns))
    {
        repainted = square_side*square_side - no_of_black_squares;
    }

    printf("%d\n", repainted);
    return 0;
}
----------------------------------------

