There are two popular keyboard layouts in Berland, they differ only in letters positions. All the other keys are the same. 
In Berland they use alphabet with 26 letters which coincides with English alphabet.

You are given two strings consisting of 26 distinct letters each: all keys of the first and the second layouts in the same order.

You are also given some text consisting of small and capital English letters and digits. It is known that it was typed in the first layout, 
but the writer intended to type it in the second layout. Print the text if the same keys were pressed in the second layout.

Since all keys but letters are the same in both layouts, the capitalization of the letters should remain the same, as well as all other characters.

Input
The first line contains a string of length 26 consisting of distinct lowercase English letters. This is the first layout.

The second line contains a string of length 26 consisting of distinct lowercase English letters. This is the second layout.

The third line contains a non-empty string s consisting of lowercase and uppercase English letters and digits. This is the text typed in the first layout. 
The length of s does not exceed 1000.

Output
Print the text if the same keys were pressed in the second layout.

-----------------------------------------------------------

I did this by making a <char, int> map ... the first keyboard's characters are mapped to a position number.
Then, when the input is read ... I display second_keyboard[map[i]] ...But, it can be done easier and better with a <char, char> map.

That way ... program is easier and cleaner.

If the character is not an alphabet, just display it as it is. Otherwise, check if it is capital or not and print the corresponding character after checking case.

--------------------------------------------------

int main()
{
    char keyboard_1[NO_OF_ALPHABETS], keyboard_2[NO_OF_ALPHABETS];
    scanf("%s %s", keyboard_1, keyboard_2);

    map <char, char> corresponding_keyboard_2_char;
    for(int i = 0; i < NO_OF_ALPHABETS; i++)
    {
        corresponding_keyboard_2_char[ keyboard_1[i] ] = keyboard_2[i];
    }

    char text[MAX_LENGTH];
    scanf("%s", text);

    for(int i = 0; text[i] != '\0'; i++)
    {
        if(isalpha(text[i]))
        {
            char input = tolower(text[i]);
            putchar(is_capital(text[i]) ? tocapital(corresponding_keyboard_2_char[input]) : corresponding_keyboard_2_char[input]);
        }
        else
        {
            putchar(text[i]); //Not there in the keyboards
        }
    }
    return 0;
}