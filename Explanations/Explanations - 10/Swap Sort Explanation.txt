In this problem your goal is to sort an array consisting of n integers in at most n swaps. 
For the given array find the sequence of swaps that makes the array sorted in the non-descending order. Swaps are performed consecutively, one after another.

Note that in this problem you do not have to minimize the number of swaps — your task is to find any sequence that is no longer than n.

--------------------------------

Didn't expect a O(n^2) solution to pass. Took a long time to write it because I suspected there was a better solution.

Be greedy and perform selection sort. In each iteration place the i-th smallest element at the i-th endex.

Maintain a vector of pairs to keep track of the indices of the swaps. Don't swap if the element is already at the right position.

(Although swapping an element with itself in the same index is allowed in this problem)

In other words, perform selection sort.

-------------------------------------

int main()
{
    typedef pair <int, int> pair_int;

    int no_of_elements;
    scanf("%d", &no_of_elements);

    vector <int> element(no_of_elements);

    for(int i = 0; i < no_of_elements; i++)
        scanf("%d", &element[i]);

    vector <pair_int> swaps;
    //Selection Sort
    for(int i = 0; i < no_of_elements; i++)
    {
        int min_i_index = i;
        for(int j = i + 1; j < no_of_elements; j++)
        {
            if(element[j] < element[min_i_index])
                min_i_index = j;
        }

        if(min_i_index != i)
        {
            swaps.push_back(make_pair(i, min_i_index));

            swap(element[min_i_index], element[i]);
        }
    }

    printf("%u\n", swaps.size());
    for(unsigned int i = 0; i < swaps.size(); i++)
    {
        printf("%d %d\n", swaps[i].first, swaps[i].second);
    }
    return 0;
}


