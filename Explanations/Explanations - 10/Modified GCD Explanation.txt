Well, here is another math class task. In mathematics, GCD is the greatest common divisor, and it's an easy task to calculate the GCD between two positive integers.

A common divisor for two positive numbers is a number which both numbers are divisible by.

But your teacher wants to give you a harder task, in this task you have to find the greatest common divisor d between two integers a and b that is in a given range from 
low to high (inclusive), i.e. low?=?d?=?high. It is possible that there is no common divisor in the given range.

You will be given the two integers a and b, then n queries. Each query is a range from low to high and you have to answer each query.

----------------------------------------------------------------

Keep a vector containing all the factors of the gcd ...

Learnt to use the STL binary search functions on this one ...

Upper bound returns the rightmost index that is <= n
Lower bound returns the leftmost index that is <= n

-------------------------------------------------------------------

int main()
{
    int a, b;
    scanf("%d %d", &a, &b);

    int gcd = get_gcd(a, b);

    vector <int> factors;
    for(int i = 1; i*i <= gcd; i++)
    {
        if(gcd%i == 0)
        {
            if(i*i == gcd)
            {
                factors.push_back(i);
            }
            else
            {
                factors.push_back(i);
                factors.push_back(gcd/i);
            }
        }
    }

    sort(all(factors));

    int number_of_queries;
    scanf("%d", &number_of_queries);

    for(int i = 1; i <= number_of_queries; i++)
    {
        int left, right, answer;
        scanf("%d %d", &left, &right);

        int index = upper_bound(factors.begin(), factors.end(), right) - factors.begin(); //Returns 1 indexed
        index--;

        if(factors[index] < left)
            answer = -1;
        else
            answer = factors[index];

        printf("%d\n", answer);
    }

    return 0;
}