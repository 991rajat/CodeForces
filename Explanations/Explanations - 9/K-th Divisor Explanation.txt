Find the k-th factor of N or find that it doesn't exist.

---------------------------------------------------------------

There are two approaches to this.

Go from i = 1 to root(n) ...

If i is a factor, store i and n/i in a vector.
Sort the vector in the end.
Display v[k - 1] (since vector is 0-indexed).

I didn't want to do this since it had sorting and it's not entirely necessary.

1. Go from i = 1 to root(n). Store all the factors till root(n).
2. Let us suppose we have x factors ... If n is  a perfect square, then we have 2x - 1 factors, otherwise, there are 2x factors.
3. If k > no of factors, answer = -1.

4. Else, if k <= x, answer is V[k - 1], since vector is 0-indexed.

5. If k > x, then it means answer is N/V[no_of_factors - k]  ... The first factor from the end is linked to the first factor from the start.

1 ... no_of_factors
2 ... no_of_factors - 1
3 ... no_of_factors - 2
.
. 
Their sum is invariant = no_of_factors + 1,

So, if N has f factors in total, and the k-th factor is greater than it's square root, it is N/V[f - k - 1] ... Since, our vector is 0-indexed, we may omit the -1.
(Because k + k' = f - 1, where the k and k' factor multiply to give N)

This approach is much superior to the other approach ... (Difference of about 400 ms) This is O(root(N)) ... 
That is O(root(N) + S log S), where S is the number of factors. This is more memory efficient too because the vector can be int and doesn't need to be long.

I was getting a TLE here ... That wasn't because of the algorithm ... In the loop, I didn't type cast i ... so while i itself will always fit into 32 bit type,
i*i will cause an overflow, and the condition i*i <= n will never be false if the overflow isn't caught.

In short, store all the factors of N from 1 till root(n)
Get the number of factors.
If k > f, answer = -1,
Else if k < root(n), answer = V[k - 1]
Else answer = V[f - k]

------------------------------------------------------------------------

int main()
{
    long long num, answer;
    unsigned int k, max_number_of_divisors;
    scanf("%I64d %d", &num, &k);

    vector <int> divisors;
    for(int i = 1; i*1LL*i <= num; i++)
        if(num%i == 0)
            divisors.push_back(i);

    max_number_of_divisors = 2*divisors.size();

    if(divisors.back()*1LL*divisors.back() == num)
        max_number_of_divisors--; //Square root gets counted twice

    if(k > max_number_of_divisors)
    {
        answer = -1;
    }
    else
    {
        if(k <= divisors.size())
            answer = divisors[k - 1];
        else
            answer = num/divisors[max_number_of_divisors - k ];
    }

    printf("%I64d\n", answer);
    return 0;
}

