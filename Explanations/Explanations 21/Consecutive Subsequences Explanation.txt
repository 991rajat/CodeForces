Let f(A[i]) denote the longest sequence ending at A[i]. 

Now, A[i] is appended to the sequence ending at A[i] - 1

So, f(A[i]) = 1 + f(A[i] - 1)

As n is large use maps. Don't use unordered maps as unordered maps have worst case complexity O(n) so the algorithm degrades to O(n^2) and causes TLE.

------------------------------

I've solved two problems seperately. First, find the longest sequence length and the last element. 

Then collect the indices. 

If I know the longest sequence has length L, and last element X

Then I need to store the index of (X - L + 1) (X - L + 2) ... (X -1) (X)

At first the index list is empty. I store the index of element (X - L + 1). Then, after that store the index of i, where
A[i] = A[index.back()] + 1

Because we know that i must be the index of the element that is one more than the last element in the list.

----------------------------------------------------------

int main()
{
    int no_of_elements;
    scanf("%d", &no_of_elements);

    vector <int> A(no_of_elements + 1, 0);
    for(int i = 1; i <= no_of_elements; i++) scanf("%d", &A[i]);

    int last_element, longest_sequence = 0;

    map <int, int> answer_with_last_element;

    for(int i = 1; i <= no_of_elements; i++)
    {
       answer_with_last_element[A[i]] = 1 + answer_with_last_element[A[i] - 1];


        if(answer_with_last_element[A[i]] > longest_sequence)
        {
            longest_sequence = answer_with_last_element[A[i]];
            last_element = A[i];
        }
    }

    vector <int> index;
    for(int i = 1; i <= no_of_elements; i++)
    {
        if(index.size() == 0)
        {
            if(A[i] == last_element - longest_sequence + 1)
                index.push_back(i);
        }
        else if(A[i] == A[index.back()] + 1)
        {
            index.push_back(i);
        }
    }

    printf("%d\n", longest_sequence);
    for(int i = 0; i < longest_sequence; i++) printf("%d ", index[i]);

    return 0;
}