Once upon a time a child got a test consisting of multiple-choice questions as homework. A multiple-choice question consists of four choices: 
A, B, C and D. Each choice has a description, and the child should find out the only one that is correct.

Fortunately the child knows how to solve such complicated test. The child will follow the algorithm:

If there is some choice whose description at least twice shorter than all other descriptions, or at least twice longer than all other descriptions, 
then the child thinks the choice is great.
If there is exactly one great choice then the child chooses it. Otherwise the child chooses C (the child think it is the luckiest choice).
You are given a multiple-choice questions, can you predict child's choose?

-----------------------------------------------------------

To check if a length is less than twice any other length, it is enough to compare the smallest and second smallest element.
Likewise for the longest length.

Because only the shortest length can be smaller than twice all other length, and if it isn't twice as small as second smallest, then it's not true,
And if it is smaller than second smallest, it will be at least twice as small as every other element.

Used a vector of int-char pairs for this one.

Sort it ...

The default answer is C

Check if there are two options (Then answer is C).

If there's only one option, choose it.

Be careful about the length of the option ... It's len - 2, Because you shouldn't count the alphabet and the dot.

Also didn't make the common bug of allocating memory for a vector of pairs and then pushing back (Will only access 0s with that)....

Another bug could be while checking twice as small ... Perform multiplication of smallest element, not division of second smallest element.

----------------------------------------------------

int main()
{
    typedef pair <int, char> int_char;

    char option[MAX_LENGTH];
    vector <int_char> option_length;

    for(int i = 0; i < 4; i++)
    {
        scanf("%s", option);
        option_length.push_back(make_pair(strlen(option) - 2, 'A' + i)); //Excluding the alphabet and the .
    }

    sort(all(option_length));

    char answer = 'C';
    if(2*option_length[0].first <= option_length[1].first && option_length[3].first >= 2*option_length[2].first)//Two options
    {
        answer = 'C';
    }
    else if(2*option_length[0].first <= option_length[1].first)
    {
        answer = option_length[0].second;
    }
    else if(option_length[3].first >= 2*option_length[2].first)
    {
        answer = option_length[3].second;
    }

    printf("%c\n", answer);
    return 0;
}