Quite interesting question. I read it yesterday and the solution and was surprised to see O(n^2) pass. 

Let's say the question said find the number of intervals, starting from 1, where each colour is winning, 

How to do this ?

keep frequency of each ball, 

whenevver you update frequency of a ball, check if it is now greater than the maximum frequency 

int winner = 0;

for(int i = 1; i <= N; i++)
	frequency[colour[i]]++

	if(frequency[colour[i]] > frequency[winner])
		winner = colour[i]

	winning_intervals[winner]++ -> This line is important

Now, just do this for every possible start, not just 1. 

The elegant trick here is to update winning interval every time and the realisation that you only need to compare the frequency of the updated colour with the winner.

-------------------------------------------------------------------

int main()
{
    int no_of_balls;
    scanf("%d", &no_of_balls);

    vector <int> colour(no_of_balls + 1, 0);
    for(int i = 1; i <= no_of_balls; i++)
        scanf("%d", &colour[i]);

    vector <int> no_of_winning_intervals(no_of_balls + 1);
    for(int start = 1; start <= no_of_balls; start++)
    {
        vector <int> frequency(no_of_balls + 1, 0);
        int winner = 0;

        for(int i = start; i <= no_of_balls; i++)
        {
            frequency[colour[i]]++;

            if(frequency[colour[i]] > frequency[winner] || (frequency[colour[i]] == frequency[winner] && colour[i] < winner))
                winner = colour[i];

            no_of_winning_intervals[winner]++;
        }
    }

    for(int ball_i = 1; ball_i <= no_of_balls; ball_i++)
        printf("%d ", no_of_winning_intervals[ball_i]);

    return 0;
}

