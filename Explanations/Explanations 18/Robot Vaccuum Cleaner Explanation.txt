
This is a custom sorting question 

Let f(A) denote the number of sh subsquences in A. 

This question requires a similar approach to segment trees. How do we calculate f(A + B) if we know f(A) and f(B) ? What information do we need ?

Any sh subsequence will either be completely in A, or completely in B or start in A and end in B.

Then, f(A + B) = f(A) + f(B) + s[A]*h[B]

We put A before B, if we get more sh sequences than if we put B before A. 

This is determined by s[A]*h[B] > S[B]*h[A].

If in the final order, the strings are concatenated in an order and there's a string A before B, where f(A + B) < f(B + A), 

swapping A and B can give us a higher number of subsequences. 

---------------------------------------------------------------------------------

struct info
{
    long long no_of_s, no_of_h;
    string text;
};

int compare(const info &A, const info &B)
{
    long long no_of_new_sh_if_A_front = A.no_of_s*B.no_of_h;
    long long no_of_new_sh_if_B_front = B.no_of_s*A.no_of_h;

    if(no_of_new_sh_if_A_front > no_of_new_sh_if_B_front)
        return true;
    else
        return false;
}

int main()
{
    int no_of_strings;
    cin >> no_of_strings;

    vector <info> A(no_of_strings);
    for(int i = 0; i < no_of_strings; i++)
    {
        cin >> A[i].text;

        A[i].no_of_s = 0;
        A[i].no_of_h = 0;

        for(int j = 0; j < A[i].text.size(); j++)
        {
            A[i].no_of_s += (A[i].text[j] == 's');
            A[i].no_of_h += (A[i].text[j] == 'h');
        }
    }

    sort(all(A), compare);

    string final_text;
    for(int i = 0; i < no_of_strings; i++)
        final_text += A[i].text;

    long long no_of_s_till_here = 0, no_of_sh = 0;
    for(int i = 0; i < final_text.size(); i++)
    {
        no_of_s_till_here += (final_text[i] == 's');

        if(final_text[i] == 'h')
            no_of_sh += no_of_s_till_here;
    }

    cout << no_of_sh;
    return 0;
}



