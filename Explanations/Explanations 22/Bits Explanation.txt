Blog Link - 

The basic idea is that if L and R have different number of digits, than the answer consists of no_of_bits(R) - 1 ones.

If R is a string of all ones, then the answer is R.

If L and R have the same number of digits, then search for the first bit i, where L[i] = 0 and R[i] = 1, 
A will have the same prefix upto (i + 1). 

Then if R is a string of all ones from I till 0, then A[i] = A[i - 1] = ... = A[0] = 1, in other words A = R

Else, A[i] = 0, and then A[i - 1] = A[i - 2] = ... = A[0] = 1


---------------------------

void solve()
{
    long long left, right;
    scanf("%I64d %I64d", &left, &right);

    long long answer = 0;

    if(all_ones(no_of_bits(right)) == right)
    {
        answer = right;
    }
    else if(no_of_bits(left) != no_of_bits(right))
    {
        answer = all_ones(no_of_bits(right) - 1);
    }
    else if(no_of_bits(left) == no_of_bits(right))
    {
        for(int bit = 63; bit >= 0; bit--)
        {
            if(is_set(left, bit) && is_set(right, bit))
            {
                answer |= (1LL << bit);
            }
            else if(!is_set(left, bit) && is_set(right, bit)) //If L[i] = 0, and R[i] = 1
            {
                answer |= all_ones(bit); //Setting the current bit to 0, and then padding with 1s till the end.

                if((answer|(1LL << bit)) <= right) //Checking if the current bit can also be 1
                    answer |= (1LL << bit);
            }
        }
    }

    printf("%I64d\n", answer);
}