
F(x) = product of factorials of all digits in decimal representation of x.

F(135) = 1!.3!.5!

For a given a, print the maximum x such that - 

1. x has no 0s and 1s
2. F(x) = F(a)

It is guaranteed that a has at least one digit that is not 0 or 1.

----------------------------------------------------

To get the maximum possible x, we generate the x with the most number of digits and then print the digits in descending order.

2, 3, 5, 7 are prime numbers ... they need to be present for their factorials.

4! = 2!.2!.3!
6! = 3!.5!
8! = 2!.2!.2!.7!
9! = 2!.3!.3!.7!

Replace each digit accordingly, sort and then print the answer.

-------------------------------------------------------

int main()
{
    int no_of_digits;
    scanf("%d", &no_of_digits);

    vector <int> number;
    for(int i = 1; i <= no_of_digits; i++)
    {
        int digit_i;
        scanf("%1d", &digit_i);

        switch(digit_i)
        {
            case 2:
            case 3:
            case 5:
            case 7: number.push_back(digit_i);
                    break;

            case 4: number.push_back(2); number.push_back(2); number.push_back(3);
                    break;

            case 6: number.push_back(3); number.push_back(5);
                    break;

            case 8: number.push_back(2); number.push_back(2); number.push_back(2); number.push_back(7);
                    break;

            case 9: number.push_back(2); number.push_back(3); number.push_back(3); number.push_back(7);
                    break;
        }
    }

    sort(all(number));

    for(int i = number.size() - 1; i >= 0; i--)
        printf("%d", number[i]);

    return 0;
}