High school student Vasya got a string of length n as a birthday present. 
This string consists of letters 'a' and 'b' only. Vasya denotes beauty of the string as the maximum length of a substring (consecutive subsequence) 
consisting of equal letters.

Vasya can change no more than k characters of the original string. What is the maximum beauty of the string he can achieve?

------------------------------------------

We need to find the maximum length substring that has k characters of one kind and any number of characters of the other kind.
 
I learnt some cool tricks from a red person's code. 
One way to 'flip' the string is to write, a[i] = a^b^a[i]. This flips every position of the string.

I maintained a window with two pointers and kept track of the number of changes. 
The number of changes increases whenever we encounter the type of character we want to change.
As soon as the number of changes is greater than the maximum number of changes, change the position of window start.

For example, |bbabbbabbaba|... and k = 3, we now have 3 a's inside the window

bba|bbbabbaba|. Put the start one position ahead of the first 'a' you find.

Find the maximum window length with k a's and any number of b's, and then do the same thing for k b's and any number of a's.

-------------------------------------------------------

int get_max_window_length(char string[], char changed_char, int max_changes)
{
    int max_window_length = 0, window_length = 0, no_of_changes = 0;

    for(int window_end = 0, window_start = 0; string[window_end] != '\0'; window_end++)
    {
        no_of_changes += (string[window_end] == changed_char);

        while(no_of_changes > max_changes)
        {
            no_of_changes -= (string[window_start++] == changed_char);
        }

        window_length = window_end - (window_start - 1);
        max_window_length = max(max_window_length, window_length);
    }

    return max_window_length;
}

int main()
{
    int length, max_changes;
    char string[MAX_LENGTH];
    scanf("%d %d %s", &length, &max_changes, string);

    int beauty = max(get_max_window_length(string, 'a', max_changes), get_max_window_length(string, 'b', max_changes));

    printf("%d\n", beauty);
    return 0;
}