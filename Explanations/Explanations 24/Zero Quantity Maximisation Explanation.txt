How do we make C[1] = 0 ? 

We have to set D = -B[1]/A[1].

Now, when we set D = -B[1]/A[1] ? Any pair of integers where B[i]/A[i] = B[1]/A[1].

So, we simply have to keep track of the frequency of each fraction and find out which comes the highest. 

Also, a few things to keep in mind - 

1. If (A[i] == 0), then we cannot have a fraction, so we just ignore it. 

2. If(A[i] = B[i] = 0) already, then we will always get a 0 at this position so we need to keep track of the number of such positions.

--------

A few things to keep in mind. 

While implementing fractions, 

1. Keep track of the fraction in it's reduced form where the numerator and denominator are coprime. 

2. a/b = (-a)/(-b) 

3. (-a)/b = a/(-b). So, try to standardise and maintain only the numerator or only the denominator as negative.

4. While calculate gcd(a, b) do gcd(|a|, |b|)

5. Since we are using maps, we need to over load the < operator so that the map knows how to store the fractions. 

6. In maps, two objects are considered equal if !(a < b) && !(b < a).  So while overloading the < operator, don't add <= by mistake.

Here is the fraction structure.

--------

struct fraction
{
    long long numerator, denominator;

    fraction(){}

    fraction(long long N, long long D)
    {
        long long G = __gcd(abs(N), abs(D));

        numerator = N/G;
        denominator = D/G;

        if(denominator < 0)
        {
            numerator *= -1;
            denominator *= -1;
        }
    }

    const int operator <(const fraction &F) const
    {
        return (denominator*F.numerator - numerator*F.denominator < 0);
    }
};

---------

The solution

int main()
{
    int no_of_elements;
    cin >> no_of_elements;

    vector <LL> A(no_of_elements + 1);
    for(int i = 1; i <= no_of_elements; i++)
        cin >> A[i];

    vector <LL> B(no_of_elements + 1);
    for(int i = 1; i <= no_of_elements; i++)
        cin >> B[i];

    int both_zeroes = 0;
    for(int i = 1; i <= no_of_elements; i++)
        both_zeroes += (A[i] == 0 && B[i] == 0);

    map <fraction, int> frequency;
    for(int i = 1; i <= no_of_elements; i++)
    {
        if(A[i] == 0)
            continue;

        frequency[fraction(-B[i], A[i])]++;
    }

    int max_frequency = 0;
    for(map <fraction, int> :: iterator it = frequency.begin(); it != frequency.end(); it++)
    {
        max_frequency = max(max_frequency, it->second);
    }

    int answer = max_frequency + both_zeroes;

    cout << answer;
    return 0;
}