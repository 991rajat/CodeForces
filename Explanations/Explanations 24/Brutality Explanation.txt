Suppose there was only one alphabet. Then what is the answer ? 

The answer is the k highest numbers. 

Now we have to treat every block of consecutive characters independently. 

For each block, maintain the costs. Sort it and take the k greatest numbers as the answer. 

A block ends either when you have reached the end of the string or when S[i] != S[i - 1].

----

int main()
{
    int length, max_elements;
    cin >> length >> max_elements;

    vector <int> A(length);
    for(int i = 0; i < length; i++)
        cin >> A[i];

    string S;
    cin >> S;

    long long total = 0;
    vector <int> last_pressed_costs;

    for(int i = 0; i <= length; i++)
    {
        if(i == length ||S[i] != S[i - 1])
        {
            sort(all(last_pressed_costs));

            reverse(all(last_pressed_costs));

            for(int j = 0; j < min(max_elements, last_pressed_costs.size()); j++)
            {
                total += last_pressed_costs[j];
            }

            last_pressed_costs.clear();
        }

        if(i == length) continue;

        last_pressed_costs.push_back(A[i]);

    }

    cout << total;
    return 0;
}