
For each element L, find the smallest R such that A[L, ... , R] is a good subarray. 

Notice that all subarrays starting at L and ending at least at R are good. There are N - R + 1 such arrays. 

So, add (N - R + 1) to the answer. 

Notice that subarrays ending at R and starting at most by L are also good subarrays. There are L such arrays. 
Now, we don't add L to the answer because we'd be overcounting.

When we are at L, we have already considered all subarrays starting at any position smaller than L. 

So, don't count twice. 
We should fix one end, either L or R and then find the other end.

------------------------------------------------------------------------------------

int main()
{
    int no_of_elements, no_of_equal_elements;
    scanf("%d %d", &no_of_elements, &no_of_equal_elements);

    vector <int> A(no_of_elements + 1);
    for(int i = 1; i <= no_of_elements; i++) scanf("%d", &A[i]);

    int left = 1, right = 1;
    long long no_of_subarrays = 0;

    map <int, int> frequency;

    while(right <= no_of_elements)
    {
        frequency[A[right]]++;

        while(frequency[A[right]] == no_of_equal_elements)
        {
            no_of_subarrays += (no_of_elements - right + 1);

            frequency[A[left]]--;
            left++;
        }

        right++;
    }

    printf("%I64d\n", no_of_subarrays);
    return 0;
}
