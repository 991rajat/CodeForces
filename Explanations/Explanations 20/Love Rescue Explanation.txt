
Draw an edge in between any two alphabets that occur in the same position of different strings. 

i.e.  ... if A[i] =/= B[i], draw an edge in between them

We will have a graph. What we must do is make sure all the components stay connected but minimise the number of edges required. 

If x can be reached from y in the original graph, it must be true for the new graph as well.

Now, how do we do this ?

Firstly, if a component has v vertices, it requires a minimum of (v - 1) edges to stay connected.

In the contest, I thought I was only allowed to delete edges, but it turns out you can construct your own graph just ensuring the same components are connected !

(It's possible to do this by finding the MST of every component, but it's not required.)

I made two solutions. In the first solution, every component had a sink, S that had an edge will all members of the component.

In the other solution, every component member had either 1 or 2 edges, depending on whether it was the first/last, or intermediate vertex.

Very interesting question.
    
-----------------------------------------------------------------

const int MAX_N = 26;
vector <int> graph[MAX_N];
vector <int> visited(MAX_N, false);
vector <int> component[MAX_N] ;

void mark(int v, int component_no)
{
    visited[v] = true;
    component[component_no].push_back(v); 

    for(int i = 0; i < graph[v].size(); i++)
    {
        int child = graph[v][i];

        if(!visited[child])
            mark(child, component_no);
    }
}

int main()
{
    int length;
    string A, B;
    cin >> length >> A >> B;

    for(int i = 0; i < length; i++)
    {
        if(A[i] != B[i])
        {
            graph[A[i] - 'a'].push_back(B[i] - 'a');
            graph[B[i] - 'a'].push_back(A[i] - 'a');
        }
    }

    int component_no = 0, no_of_edges = 0;
    for(int i = 0; i < MAX_N; i++)
    {
        if(graph[i].size() != 0 && !visited[i])
        {
            mark(i, component_no);
            no_of_edges += component[component_no].size() - 1;

            component_no++;
        }
    }

    cout << no_of_edges << "\n";
    for(int i = 0; i < component_no; i++)
    {
        for(int j = 1; j < component[i].size(); j++)
        {
            cout << char('a' + component[i][j - 1]) << " " << char('a' + component[i][j]) << "\n";
        }
    }

    return 0;
}

----------------------------------------------------------------

The other solution with the sink would be printed like this - 

for(int i = 0; i < component_no; i++)
    {
        for(int j = 1; j < component[i].size(); j++)
        {
            cout << char('a' + component[i][0]) << " " << char('a' + component[i][j]) << "\n";
        }
    }